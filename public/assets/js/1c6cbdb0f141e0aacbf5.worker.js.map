{"version":3,"sources":["webpack:///1c6cbdb0f141e0aacbf5.worker.js","webpack:///webpack/bootstrap 1c6cbdb0f141e0aacbf5","webpack:///./js/uploadfile-worker.js","webpack:///./~/twemoji/2/twemoji.npm.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","zeroPad","string","formatTimestamp","timestamp","d","Date","formattedDate","getFullYear","getMonth","getDate","hours","getHours","minutes","getMinutes","formattedTime","getParticipantsAndConversationList","data","g_conversation_list","conversation_state","conversationList","map","item","g_participant_data","conversation","participant_data","g_conversation_id","conversation_id","participants","participant","fallback_name","gaia_id","ALL_PARTICIPANTS","name_id","name","unknown_constant","list","substr","getConversations","conversation_states","result","g_events","event","history","msgtime","sender","sender_id","sender_name","content","message","photo","url","thumbnail","chat_message","chatMsg","segments","message_content","segment","attachments","attachment","reduce","acc","text","twemoji","parse","embed_item","type","image_url","event_type","hangout_event","media_type","hangout_duration_secs","sort","a","b","keyA","keyB","handleFile","Hangouts","JSON","CONVERSATION_LIST","CONVERSATIONS","conversations","Map","set","console","log","self","onmessage","e","file","postMessage","reader","FileReader","readAsText","onload","worker","evt","target","length","conversation_list","onerror","err","global","location","createText","document","createTextNode","escapeHTML","s","replace","rescaper","replacer","defaultImageSrcGenerator","icon","options","concat","base","size","ext","grabAllTextNodes","node","allText","subnode","nodeType","childNodes","push","shouldntBeParsed","test","nodeName","grabTheRightIcon","rawText","toCodePoint","indexOf","U200D","UFE0Fg","parseNode","attrib","attrname","modified","fragment","match","i","index","img","iconId","src","createDocumentFragment","nodeValue","re","exec","appendChild","slice","callback","Image","setAttribute","attributes","hasOwnProperty","hasAttribute","className","alt","parentNode","replaceChild","parseString","str","ret","escaper","returnNull","toSizeSquaredAsset","value","fromCodePoint","codepoint","code","parseInt","fromCharCode","what","how","folder","String","lastIndex","unicodeSurrogates","sep","r","charCodeAt","toString","join","convert","this","&","<",">","'","\"","protocol"],"mappings":"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","file":"1c6cbdb0f141e0aacbf5.worker.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"/public/assets/js/\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*jslint node: true */\n\t'use strict';\n\t\n\t// importScripts('https://cdnjs.cloudflare.com/ajax/libs/twemoji/1.2.1/twemoji.min.js');\n\t\n\tvar twemoji = __webpack_require__(1);\n\t\n\tvar ALL_PARTICIPANTS = {};\n\tvar CONVERSATION_LIST = [];\n\tvar CONVERSATIONS = {};\n\t\n\tfunction zeroPad(string) {\n\t\treturn string < 10 ? \"0\" + string : string;\n\t}\n\t\n\tfunction formatTimestamp(timestamp) {\n\t\tvar d = new Date(timestamp / 1000);\n\t\tvar formattedDate = d.getFullYear() + \"-\" + zeroPad(d.getMonth() + 1) + \"-\" + zeroPad(d.getDate());\n\t\tvar hours = zeroPad(d.getHours());\n\t\tvar minutes = zeroPad(d.getMinutes());\n\t\tvar formattedTime = hours + \":\" + minutes;\n\t\treturn formattedDate + \" \" + formattedTime;\n\t}\n\t\n\tfunction getParticipantsAndConversationList(data) {\n\t\tvar g_conversation_list = data.conversation_state;\n\t\n\t\tvar conversationList = g_conversation_list.map(function (item) {\n\t\t\tvar g_participant_data = item.conversation_state.conversation.participant_data;\n\t\t\tvar g_conversation_id = item.conversation_id.id;\n\t\n\t\t\t// Get all participants\n\t\t\tvar participants = g_participant_data.map(function (participant) {\n\t\t\t\tif (!participant.fallback_name || participant.fallback_name === null) {\n\t\t\t\t\tvar unknown_constant = -1;\n\t\t\t\t\tALL_PARTICIPANTS[unknown_constant] = {};\n\t\t\t\t\tALL_PARTICIPANTS[unknown_constant][g_conversation_id] = 'Unknown';\n\t\n\t\t\t\t\treturn {\n\t\t\t\t\t\tname_id: -1,\n\t\t\t\t\t\tname: 'Unknown'\n\t\t\t\t\t};\n\t\t\t\t} else {\n\t\t\t\t\tvar fallback_name = participant.fallback_name;\n\t\t\t\t\tvar gaia_id = participant.id.gaia_id;\n\t\n\t\t\t\t\tif (ALL_PARTICIPANTS[gaia_id]) {\n\t\t\t\t\t\tALL_PARTICIPANTS[gaia_id][g_conversation_id] = fallback_name;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tALL_PARTICIPANTS[gaia_id] = {};\n\t\t\t\t\t\tALL_PARTICIPANTS[gaia_id][g_conversation_id] = fallback_name;\n\t\t\t\t\t}\n\t\n\t\t\t\t\treturn {\n\t\t\t\t\t\tname_id: gaia_id,\n\t\t\t\t\t\tname: fallback_name\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t});\n\t\n\t\t\tvar list = '';\n\t\t\tparticipants.map(function (item) {\n\t\t\t\tlist = list + ', ' + item.name;\n\t\t\t});\n\t\t\tlist = list.substr(2);\n\t\n\t\t\treturn {\n\t\t\t\tid: g_conversation_id,\n\t\t\t\tparticipants: participants,\n\t\t\t\tlist: list\n\t\t\t};\n\t\t});\n\t\n\t\treturn conversationList;\n\t}\n\t\n\tfunction getConversations(data) {\n\t\tvar conversation_states = data.conversation_state;\n\t\n\t\tvar result = conversation_states.map(function (item) {\n\t\t\tvar g_conversation_id = item.conversation_id.id;\n\t\t\tvar g_events = item.conversation_state.event;\n\t\n\t\t\tvar history = g_events.map(function (event) {\n\t\t\t\tvar timestamp = event.timestamp;\n\t\t\t\tvar msgtime = formatTimestamp(timestamp);\n\t\t\t\tvar sender = event.sender_id.gaia_id;\n\t\t\t\tvar sender_name = 'Unknown';\n\t\t\t\tvar content = {\n\t\t\t\t\tmessage: '',\n\t\t\t\t\tphoto: {\n\t\t\t\t\t\turl: '',\n\t\t\t\t\t\tthumbnail: ''\n\t\t\t\t\t}\n\t\t\t\t};\n\t\n\t\t\t\tif (event.chat_message) {\n\t\t\t\t\tvar chatMsg = event.chat_message;\n\t\t\t\t\tvar segments = chatMsg.message_content.segment;\n\t\t\t\t\tvar attachments = chatMsg.message_content.attachment;\n\t\n\t\t\t\t\t// Try and get messages\n\t\t\t\t\tif (segments) {\n\t\t\t\t\t\tcontent.message = segments.reduce(function (acc, segment) {\n\t\t\t\t\t\t\tif (segment.text) {\n\t\t\t\t\t\t\t\treturn acc + twemoji.parse(segment.text);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}, '');\n\t\t\t\t\t}\n\t\n\t\t\t\t\t// Try and get photos\n\t\t\t\t\tif (attachments) {\n\t\t\t\t\t\tcontent.photo = attachments.map(function (attachment) {\n\t\t\t\t\t\t\tif (attachment.embed_item.type[0] === \"PLUS_PHOTO\") {\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\turl: attachment.embed_item['embeds.PlusPhoto.plus_photo'].url,\n\t\t\t\t\t\t\t\t\tthumbnail: attachment.embed_item['embeds.PlusPhoto.plus_photo'].thumbnail.image_url\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\turl: '',\n\t\t\t\t\t\t\t\t\tthumbnail: ''\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\t// seems like only one photo shows up every time\n\t\t\t\t\t\tcontent.photo = content.photo[0];\n\t\t\t\t\t}\n\t\t\t\t} else if (event.event_type === 'HANGOUT_EVENT') {\n\t\t\t\t\tif (event.hangout_event.media_type === 'AUDIO_ONLY') {\n\t\t\t\t\t\tif (event.hangout_event.hangout_duration_secs) {\n\t\t\t\t\t\t\tcontent.message = 'Voice Call: ' + event.hangout_event.hangout_duration_secs + ' seconds';\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcontent.message = 'Failed voice call.';\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (event.hangout_event.media_type === 'AUDIO_VIDEO') {\n\t\t\t\t\t\tif (event.hangout_event.hangout_duration_secs) {\n\t\t\t\t\t\t\tcontent.message = 'Video Call: ' + event.hangout_event.hangout_duration_secs + ' seconds';\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcontent.message = 'Failed video call.';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\tif (ALL_PARTICIPANTS[sender]) {\n\t\t\t\t\tsender_name = ALL_PARTICIPANTS[sender][g_conversation_id];\n\t\t\t\t}\n\t\n\t\t\t\treturn {\n\t\t\t\t\t// msgTime: msgTime,\n\t\t\t\t\tsender_id: sender,\n\t\t\t\t\tsender_name: sender_name,\n\t\t\t\t\ttimestamp: timestamp,\n\t\t\t\t\tmsgtime: msgtime,\n\t\t\t\t\tcontent: content\n\t\t\t\t};\n\t\t\t});\n\t\n\t\t\t// Sort events by timestamp\n\t\t\thistory.sort(function (a, b) {\n\t\t\t\tvar keyA = a.timestamp,\n\t\t\t\t    keyB = b.timestamp;\n\t\t\t\tif (keyA < keyB) {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\tif (keyA > keyB) {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\treturn 0;\n\t\t\t});\n\t\n\t\t\treturn {\n\t\t\t\tconversation_id: g_conversation_id,\n\t\t\t\thistory: history\n\t\t\t};\n\t\t});\n\t\n\t\treturn result;\n\t}\n\t\n\tfunction handleFile(data) {\n\t\n\t\tvar Hangouts = JSON.parse(data);\n\t\tCONVERSATION_LIST = getParticipantsAndConversationList(Hangouts);\n\t\tCONVERSATIONS = getConversations(Hangouts);\n\t\t// console.log(CONVERSATION_LIST);\n\t\t// console.log(CONVERSATIONS);\n\t\t// console.log(result.conversation_list);\n\t\t// console.log(result.conversations);\n\t\t// console.log(result.all_participants);\n\t\n\t\tvar conversations = new Map();\n\t\tCONVERSATIONS.map(function (item) {\n\t\t\t// console.log(item.conversation_id);\n\t\t\tconversations.set(item.conversation_id, item.history);\n\t\t});\n\t\t// console.log(conversations.get('UgylVwHUsKjYT5sSElJ4AaABAQ'));\n\t\n\t\n\t\t// createVueStuff(CONVERSATION_LIST, conversations);\n\t\t// vueInstance.conversation_list = CONVERSATION_LIST;\n\t\t// GLOBAL_conversations = conversations;\n\t\t// \n\t\tconsole.log(CONVERSATION_LIST);\n\t\n\t\treturn [CONVERSATION_LIST, conversations];\n\t}\n\t\n\tself.onmessage = function (e) {\n\t\tif (e.data.file) {\n\t\t\tself.postMessage(\"see a file\");\n\t\n\t\t\tvar file = e.data.file;\n\t\t\tvar reader = new FileReader();\n\t\t\treader.readAsText(file, \"UTF-8\");\n\t\n\t\t\tconsole.log(\"started reading file\");\n\t\n\t\t\treader.onload = function (worker) {\n\t\t\t\treturn function (evt) {\n\t\n\t\t\t\t\tconsole.log(\"Loaded: \" + evt.target.result.length);\n\t\t\t\t\t// observer.next(evt.target.result);\n\t\t\t\t\tvar result = handleFile(evt.target.result);\n\t\n\t\t\t\t\t// createVueStuff(CONVERSATION_LIST, conversations);\n\t\t\t\t\tvar conversation_list = result[0];\n\t\t\t\t\tvar conversations = result[1];\n\t\n\t\t\t\t\tworker.postMessage({\n\t\t\t\t\t\tconversation_list: conversation_list,\n\t\t\t\t\t\tconversations: conversations\n\t\t\t\t\t});\n\t\t\t\t};\n\t\t\t}(self);\n\t\n\t\t\treader.onerror = function (worker) {\n\t\t\t\treturn function (err) {\n\t\t\t\t\tworker.postMessage(err);\n\t\t\t\t};\n\t\t\t}(self);\n\t\t}\n\t};\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t/* WEBPACK VAR INJECTION */(function(global) {var location = global.location || {};\n\t/*jslint indent: 2, browser: true, bitwise: true, plusplus: true */\n\tvar twemoji = (function (\n\t  /*! Copyright Twitter Inc. and other contributors. Licensed under MIT *//*\n\t    https://github.com/twitter/twemoji/blob/gh-pages/LICENSE\n\t  */\n\t\n\t  // WARNING:   this file is generated automatically via\n\t  //            `node twemoji-generator.js`\n\t  //            please update its `createTwemoji` function\n\t  //            at the bottom of the same file instead.\n\t\n\t) {\n\t  'use strict';\n\t\n\t  /*jshint maxparams:4 */\n\t\n\t  var\n\t    // the exported module object\n\t    twemoji = {\n\t\n\t\n\t    /////////////////////////\n\t    //      properties     //\n\t    /////////////////////////\n\t\n\t      // default assets url, by default will be Twitter Inc. CDN\n\t      base: 'https://twemoji.maxcdn.com/2/',\n\t\n\t      // default assets file extensions, by default '.png'\n\t      ext: '.png',\n\t\n\t      // default assets/folder size, by default \"72x72\"\n\t      // available via Twitter CDN: 72\n\t      size: '72x72',\n\t\n\t      // default class name, by default 'emoji'\n\t      className: 'emoji',\n\t\n\t      // basic utilities / helpers to convert code points\n\t      // to JavaScript surrogates and vice versa\n\t      convert: {\n\t\n\t        /**\n\t         * Given an HEX codepoint, returns UTF16 surrogate pairs.\n\t         *\n\t         * @param   string  generic codepoint, i.e. '1F4A9'\n\t         * @return  string  codepoint transformed into utf16 surrogates pair,\n\t         *          i.e. \\uD83D\\uDCA9\n\t         *\n\t         * @example\n\t         *  twemoji.convert.fromCodePoint('1f1e8');\n\t         *  // \"\\ud83c\\udde8\"\n\t         *\n\t         *  '1f1e8-1f1f3'.split('-').map(twemoji.convert.fromCodePoint).join('')\n\t         *  // \"\\ud83c\\udde8\\ud83c\\uddf3\"\n\t         */\n\t        fromCodePoint: fromCodePoint,\n\t\n\t        /**\n\t         * Given UTF16 surrogate pairs, returns the equivalent HEX codepoint.\n\t         *\n\t         * @param   string  generic utf16 surrogates pair, i.e. \\uD83D\\uDCA9\n\t         * @param   string  optional separator for double code points, default='-'\n\t         * @return  string  utf16 transformed into codepoint, i.e. '1F4A9'\n\t         *\n\t         * @example\n\t         *  twemoji.convert.toCodePoint('\\ud83c\\udde8\\ud83c\\uddf3');\n\t         *  // \"1f1e8-1f1f3\"\n\t         *\n\t         *  twemoji.convert.toCodePoint('\\ud83c\\udde8\\ud83c\\uddf3', '~');\n\t         *  // \"1f1e8~1f1f3\"\n\t         */\n\t        toCodePoint: toCodePoint\n\t      },\n\t\n\t\n\t    /////////////////////////\n\t    //       methods       //\n\t    /////////////////////////\n\t\n\t      /**\n\t       * User first: used to remove missing images\n\t       * preserving the original text intent when\n\t       * a fallback for network problems is desired.\n\t       * Automatically added to Image nodes via DOM\n\t       * It could be recycled for string operations via:\n\t       *  $('img.emoji').on('error', twemoji.onerror)\n\t       */\n\t      onerror: function onerror() {\n\t        if (this.parentNode) {\n\t          this.parentNode.replaceChild(createText(this.alt), this);\n\t        }\n\t      },\n\t\n\t      /**\n\t       * Main method/logic to generate either <img> tags or HTMLImage nodes.\n\t       *  \"emojify\" a generic text or DOM Element.\n\t       *\n\t       * @overloads\n\t       *\n\t       * String replacement for `innerHTML` or server side operations\n\t       *  twemoji.parse(string);\n\t       *  twemoji.parse(string, Function);\n\t       *  twemoji.parse(string, Object);\n\t       *\n\t       * HTMLElement tree parsing for safer operations over existing DOM\n\t       *  twemoji.parse(HTMLElement);\n\t       *  twemoji.parse(HTMLElement, Function);\n\t       *  twemoji.parse(HTMLElement, Object);\n\t       *\n\t       * @param   string|HTMLElement  the source to parse and enrich with emoji.\n\t       *\n\t       *          string              replace emoji matches with <img> tags.\n\t       *                              Mainly used to inject emoji via `innerHTML`\n\t       *                              It does **not** parse the string or validate it,\n\t       *                              it simply replaces found emoji with a tag.\n\t       *                              NOTE: be sure this won't affect security.\n\t       *\n\t       *          HTMLElement         walk through the DOM tree and find emoji\n\t       *                              that are inside **text node only** (nodeType === 3)\n\t       *                              Mainly used to put emoji in already generated DOM\n\t       *                              without compromising surrounding nodes and\n\t       *                              **avoiding** the usage of `innerHTML`.\n\t       *                              NOTE: Using DOM elements instead of strings should\n\t       *                              improve security without compromising too much\n\t       *                              performance compared with a less safe `innerHTML`.\n\t       *\n\t       * @param   Function|Object  [optional]\n\t       *                              either the callback that will be invoked or an object\n\t       *                              with all properties to use per each found emoji.\n\t       *\n\t       *          Function            if specified, this will be invoked per each emoji\n\t       *                              that has been found through the RegExp except\n\t       *                              those follwed by the invariant \\uFE0E (\"as text\").\n\t       *                              Once invoked, parameters will be:\n\t       *\n\t       *                                iconId:string     the lower case HEX code point\n\t       *                                                  i.e. \"1f4a9\"\n\t       *\n\t       *                                options:Object    all info for this parsing operation\n\t       *\n\t       *                                variant:char      the optional \\uFE0F (\"as image\")\n\t       *                                                  variant, in case this info\n\t       *                                                  is anyhow meaningful.\n\t       *                                                  By default this is ignored.\n\t       *\n\t       *                              If such callback will return a falsy value instead\n\t       *                              of a valid `src` to use for the image, nothing will\n\t       *                              actually change for that specific emoji.\n\t       *\n\t       *\n\t       *          Object              if specified, an object containing the following properties\n\t       *\n\t       *            callback   Function  the callback to invoke per each found emoji.\n\t       *            base       string    the base url, by default twemoji.base\n\t       *            ext        string    the image extension, by default twemoji.ext\n\t       *            size       string    the assets size, by default twemoji.size\n\t       *\n\t       * @example\n\t       *\n\t       *  twemoji.parse(\"I \\u2764\\uFE0F emoji!\");\n\t       *  // I <img class=\"emoji\" draggable=\"false\" alt=\"❤️\" src=\"/assets/2764.gif\"> emoji!\n\t       *\n\t       *\n\t       *  twemoji.parse(\"I \\u2764\\uFE0F emoji!\", function(iconId, options) {\n\t       *    return '/assets/' + iconId + '.gif';\n\t       *  });\n\t       *  // I <img class=\"emoji\" draggable=\"false\" alt=\"❤️\" src=\"/assets/2764.gif\"> emoji!\n\t       *\n\t       *\n\t       * twemoji.parse(\"I \\u2764\\uFE0F emoji!\", {\n\t       *   size: 72,\n\t       *   callback: function(iconId, options) {\n\t       *     return '/assets/' + options.size + '/' + iconId + options.ext;\n\t       *   }\n\t       * });\n\t       *  // I <img class=\"emoji\" draggable=\"false\" alt=\"❤️\" src=\"/assets/72x72/2764.png\"> emoji!\n\t       *\n\t       */\n\t      parse: parse,\n\t\n\t      /**\n\t       * Given a string, invokes the callback argument\n\t       *  per each emoji found in such string.\n\t       * This is the most raw version used by\n\t       *  the .parse(string) method itself.\n\t       *\n\t       * @param   string    generic string to parse\n\t       * @param   Function  a generic callback that will be\n\t       *                    invoked to replace the content.\n\t       *                    This calback wil receive standard\n\t       *                    String.prototype.replace(str, callback)\n\t       *                    arguments such:\n\t       *  callback(\n\t       *    rawText,  // the emoji match\n\t       *  );\n\t       *\n\t       *                    and others commonly received via replace.\n\t       */\n\t      replace: replace,\n\t\n\t      /**\n\t       * Simplify string tests against emoji.\n\t       *\n\t       * @param   string  some text that might contain emoji\n\t       * @return  boolean true if any emoji was found, false otherwise.\n\t       *\n\t       * @example\n\t       *\n\t       *  if (twemoji.test(someContent)) {\n\t       *    console.log(\"emoji All The Things!\");\n\t       *  }\n\t       */\n\t      test: test\n\t    },\n\t\n\t    // used to escape HTML special chars in attributes\n\t    escaper = {\n\t      '&': '&amp;',\n\t      '<': '&lt;',\n\t      '>': '&gt;',\n\t      \"'\": '&#39;',\n\t      '\"': '&quot;'\n\t    },\n\t\n\t    // RegExp based on emoji's official Unicode standards\n\t    // http://www.unicode.org/Public/UNIDATA/EmojiSources.txt\n\t    re = /\\ud83d[\\udc68-\\udc69](?:\\ud83c[\\udffb-\\udfff])?\\u200d(?:\\u2695\\ufe0f|\\u2696\\ufe0f|\\u2708\\ufe0f|\\ud83c[\\udf3e\\udf73\\udf93\\udfa4\\udfa8\\udfeb\\udfed]|\\ud83d[\\udcbb\\udcbc\\udd27\\udd2c\\ude80\\ude92])|(?:\\ud83c[\\udfcb\\udfcc]|\\ud83d\\udd75|\\u26f9)(?:\\ufe0f|\\ud83c[\\udffb-\\udfff])\\u200d[\\u2640\\u2642]\\ufe0f|(?:\\ud83c[\\udfc3\\udfc4\\udfca]|\\ud83d[\\udc6e\\udc71\\udc73\\udc77\\udc81\\udc82\\udc86\\udc87\\ude45-\\ude47\\ude4b\\ude4d\\ude4e\\udea3\\udeb4-\\udeb6]|\\ud83e[\\udd26\\udd37-\\udd39\\udd3d\\udd3e])(?:\\ud83c[\\udffb-\\udfff])?\\u200d[\\u2640\\u2642]\\ufe0f|\\ud83d\\udc68\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc68|\\ud83d\\udc68\\u200d\\ud83d\\udc68\\u200d\\ud83d\\udc66\\u200d\\ud83d\\udc66|\\ud83d\\udc68\\u200d\\ud83d\\udc68\\u200d\\ud83d\\udc67\\u200d\\ud83d[\\udc66\\udc67]|\\ud83d\\udc68\\u200d\\ud83d\\udc69\\u200d\\ud83d\\udc66\\u200d\\ud83d\\udc66|\\ud83d\\udc68\\u200d\\ud83d\\udc69\\u200d\\ud83d\\udc67\\u200d\\ud83d[\\udc66\\udc67]|\\ud83d\\udc69\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d[\\udc68\\udc69]|\\ud83d\\udc69\\u200d\\ud83d\\udc69\\u200d\\ud83d\\udc66\\u200d\\ud83d\\udc66|\\ud83d\\udc69\\u200d\\ud83d\\udc69\\u200d\\ud83d\\udc67\\u200d\\ud83d[\\udc66\\udc67]|\\ud83d\\udc68\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc68|\\ud83d\\udc68\\u200d\\ud83d\\udc66\\u200d\\ud83d\\udc66|\\ud83d\\udc68\\u200d\\ud83d\\udc67\\u200d\\ud83d[\\udc66\\udc67]|\\ud83d\\udc68\\u200d\\ud83d\\udc68\\u200d\\ud83d[\\udc66\\udc67]|\\ud83d\\udc68\\u200d\\ud83d\\udc69\\u200d\\ud83d[\\udc66\\udc67]|\\ud83d\\udc69\\u200d\\u2764\\ufe0f\\u200d\\ud83d[\\udc68\\udc69]|\\ud83d\\udc69\\u200d\\ud83d\\udc66\\u200d\\ud83d\\udc66|\\ud83d\\udc69\\u200d\\ud83d\\udc67\\u200d\\ud83d[\\udc66\\udc67]|\\ud83d\\udc69\\u200d\\ud83d\\udc69\\u200d\\ud83d[\\udc66\\udc67]|\\ud83c\\udff3\\ufe0f\\u200d\\ud83c\\udf08|\\ud83c\\udff4\\u200d\\u2620\\ufe0f|\\ud83d\\udc41\\u200d\\ud83d\\udde8|\\ud83d\\udc68\\u200d\\ud83d[\\udc66\\udc67]|\\ud83d\\udc69\\u200d\\ud83d[\\udc66\\udc67]|\\ud83d\\udc6f\\u200d\\u2640\\ufe0f|\\ud83d\\udc6f\\u200d\\u2642\\ufe0f|\\ud83e\\udd3c\\u200d\\u2640\\ufe0f|\\ud83e\\udd3c\\u200d\\u2642\\ufe0f|(?:[\\u0023\\u002a\\u0030-\\u0039])\\ufe0f?\\u20e3|(?:(?:\\ud83c[\\udfcb\\udfcc]|\\ud83d[\\udd74\\udd75\\udd90]|[\\u261d\\u26f7\\u26f9\\u270c\\u270d])(?:\\ufe0f|(?!\\ufe0e))|\\ud83c[\\udf85\\udfc2-\\udfc4\\udfc7\\udfca]|\\ud83d[\\udc42\\udc43\\udc46-\\udc50\\udc66-\\udc69\\udc6e\\udc70-\\udc78\\udc7c\\udc81-\\udc83\\udc85-\\udc87\\udcaa\\udd7a\\udd95\\udd96\\ude45-\\ude47\\ude4b-\\ude4f\\udea3\\udeb4-\\udeb6\\udec0\\udecc]|\\ud83e[\\udd18-\\udd1c\\udd1e\\udd26\\udd30\\udd33-\\udd39\\udd3d\\udd3e]|[\\u270a\\u270b])(?:\\ud83c[\\udffb-\\udfff]|)|\\ud83c\\udde6\\ud83c[\\udde8-\\uddec\\uddee\\uddf1\\uddf2\\uddf4\\uddf6-\\uddfa\\uddfc\\uddfd\\uddff]|\\ud83c\\udde7\\ud83c[\\udde6\\udde7\\udde9-\\uddef\\uddf1-\\uddf4\\uddf6-\\uddf9\\uddfb\\uddfc\\uddfe\\uddff]|\\ud83c\\udde8\\ud83c[\\udde6\\udde8\\udde9\\uddeb-\\uddee\\uddf0-\\uddf5\\uddf7\\uddfa-\\uddff]|\\ud83c\\udde9\\ud83c[\\uddea\\uddec\\uddef\\uddf0\\uddf2\\uddf4\\uddff]|\\ud83c\\uddea\\ud83c[\\udde6\\udde8\\uddea\\uddec\\udded\\uddf7-\\uddfa]|\\ud83c\\uddeb\\ud83c[\\uddee-\\uddf0\\uddf2\\uddf4\\uddf7]|\\ud83c\\uddec\\ud83c[\\udde6\\udde7\\udde9-\\uddee\\uddf1-\\uddf3\\uddf5-\\uddfa\\uddfc\\uddfe]|\\ud83c\\udded\\ud83c[\\uddf0\\uddf2\\uddf3\\uddf7\\uddf9\\uddfa]|\\ud83c\\uddee\\ud83c[\\udde8-\\uddea\\uddf1-\\uddf4\\uddf6-\\uddf9]|\\ud83c\\uddef\\ud83c[\\uddea\\uddf2\\uddf4\\uddf5]|\\ud83c\\uddf0\\ud83c[\\uddea\\uddec-\\uddee\\uddf2\\uddf3\\uddf5\\uddf7\\uddfc\\uddfe\\uddff]|\\ud83c\\uddf1\\ud83c[\\udde6-\\udde8\\uddee\\uddf0\\uddf7-\\uddfb\\uddfe]|\\ud83c\\uddf2\\ud83c[\\udde6\\udde8-\\udded\\uddf0-\\uddff]|\\ud83c\\uddf3\\ud83c[\\udde6\\udde8\\uddea-\\uddec\\uddee\\uddf1\\uddf4\\uddf5\\uddf7\\uddfa\\uddff]|\\ud83c\\uddf4\\ud83c\\uddf2|\\ud83c\\uddf5\\ud83c[\\udde6\\uddea-\\udded\\uddf0-\\uddf3\\uddf7-\\uddf9\\uddfc\\uddfe]|\\ud83c\\uddf6\\ud83c\\udde6|\\ud83c\\uddf7\\ud83c[\\uddea\\uddf4\\uddf8\\uddfa\\uddfc]|\\ud83c\\uddf8\\ud83c[\\udde6-\\uddea\\uddec-\\uddf4\\uddf7-\\uddf9\\uddfb\\uddfd-\\uddff]|\\ud83c\\uddf9\\ud83c[\\udde6\\udde8\\udde9\\uddeb-\\udded\\uddef-\\uddf4\\uddf7\\uddf9\\uddfb\\uddfc\\uddff]|\\ud83c\\uddfa\\ud83c[\\udde6\\uddec\\uddf2\\uddf3\\uddf8\\uddfe\\uddff]|\\ud83c\\uddfb\\ud83c[\\udde6\\udde8\\uddea\\uddec\\uddee\\uddf3\\uddfa]|\\ud83c\\uddfc\\ud83c[\\uddeb\\uddf8]|\\ud83c\\uddfd\\ud83c\\uddf0|\\ud83c\\uddfe\\ud83c[\\uddea\\uddf9]|\\ud83c\\uddff\\ud83c[\\udde6\\uddf2\\uddfc]|\\ud800\\udc00|\\ud83c[\\udccf\\udd8e\\udd91-\\udd9a\\udde6-\\uddff\\ude01\\ude32-\\ude36\\ude38-\\ude3a\\ude50\\ude51\\udf00-\\udf20\\udf2d-\\udf35\\udf37-\\udf7c\\udf7e-\\udf84\\udf86-\\udf93\\udfa0-\\udfc1\\udfc5\\udfc6\\udfc8\\udfc9\\udfcf-\\udfd3\\udfe0-\\udff0\\udff4\\udff8-\\udfff]|\\ud83d[\\udc00-\\udc3e\\udc40\\udc44\\udc45\\udc51-\\udc65\\udc6a-\\udc6d\\udc6f\\udc79-\\udc7b\\udc7d-\\udc80\\udc84\\udc88-\\udca9\\udcab-\\udcfc\\udcff-\\udd3d\\udd4b-\\udd4e\\udd50-\\udd67\\udda4\\uddfb-\\ude44\\ude48-\\ude4a\\ude80-\\udea2\\udea4-\\udeb3\\udeb7-\\udebf\\udec1-\\udec5\\uded0-\\uded2\\udeeb\\udeec\\udef4-\\udef6]|\\ud83e[\\udd10-\\udd17\\udd1d\\udd20-\\udd25\\udd27\\udd3a\\udd3c\\udd40-\\udd45\\udd47-\\udd4b\\udd50-\\udd5e\\udd80-\\udd91\\uddc0]|[\\u23e9-\\u23ec\\u23f0\\u23f3\\u2640\\u2642\\u2695\\u26ce\\u2705\\u2728\\u274c\\u274e\\u2753-\\u2755\\u2795-\\u2797\\u27b0\\u27bf\\ue50a]|(?:\\ud83c[\\udc04\\udd70\\udd71\\udd7e\\udd7f\\ude02\\ude1a\\ude2f\\ude37\\udf21\\udf24-\\udf2c\\udf36\\udf7d\\udf96\\udf97\\udf99-\\udf9b\\udf9e\\udf9f\\udfcd\\udfce\\udfd4-\\udfdf\\udff3\\udff5\\udff7]|\\ud83d[\\udc3f\\udc41\\udcfd\\udd49\\udd4a\\udd6f\\udd70\\udd73\\udd76-\\udd79\\udd87\\udd8a-\\udd8d\\udda5\\udda8\\uddb1\\uddb2\\uddbc\\uddc2-\\uddc4\\uddd1-\\uddd3\\udddc-\\uddde\\udde1\\udde3\\udde8\\uddef\\uddf3\\uddfa\\udecb\\udecd-\\udecf\\udee0-\\udee5\\udee9\\udef0\\udef3]|[\\u00a9\\u00ae\\u203c\\u2049\\u2122\\u2139\\u2194-\\u2199\\u21a9\\u21aa\\u231a\\u231b\\u2328\\u23cf\\u23ed-\\u23ef\\u23f1\\u23f2\\u23f8-\\u23fa\\u24c2\\u25aa\\u25ab\\u25b6\\u25c0\\u25fb-\\u25fe\\u2600-\\u2604\\u260e\\u2611\\u2614\\u2615\\u2618\\u2620\\u2622\\u2623\\u2626\\u262a\\u262e\\u262f\\u2638-\\u263a\\u2648-\\u2653\\u2660\\u2663\\u2665\\u2666\\u2668\\u267b\\u267f\\u2692-\\u2694\\u2696\\u2697\\u2699\\u269b\\u269c\\u26a0\\u26a1\\u26aa\\u26ab\\u26b0\\u26b1\\u26bd\\u26be\\u26c4\\u26c5\\u26c8\\u26cf\\u26d1\\u26d3\\u26d4\\u26e9\\u26ea\\u26f0-\\u26f5\\u26f8\\u26fa\\u26fd\\u2702\\u2708\\u2709\\u270f\\u2712\\u2714\\u2716\\u271d\\u2721\\u2733\\u2734\\u2744\\u2747\\u2757\\u2763\\u2764\\u27a1\\u2934\\u2935\\u2b05-\\u2b07\\u2b1b\\u2b1c\\u2b50\\u2b55\\u3030\\u303d\\u3297\\u3299])(?:\\ufe0f|(?!\\ufe0e))/g,\n\t\n\t    // avoid runtime RegExp creation for not so smart,\n\t    // not JIT based, and old browsers / engines\n\t    UFE0Fg = /\\uFE0F/g,\n\t\n\t    // avoid using a string literal like '\\u200D' here because minifiers expand it inline\n\t    U200D = String.fromCharCode(0x200D),\n\t\n\t    // used to find HTML special chars in attributes\n\t    rescaper = /[&<>'\"]/g,\n\t\n\t    // nodes with type 1 which should **not** be parsed (including lower case svg)\n\t    shouldntBeParsed = /IFRAME|NOFRAMES|NOSCRIPT|SCRIPT|SELECT|STYLE|TEXTAREA|[a-z]/,\n\t\n\t    // just a private shortcut\n\t    fromCharCode = String.fromCharCode;\n\t\n\t  return twemoji;\n\t\n\t\n\t  /////////////////////////\n\t  //  private functions  //\n\t  //     declaration     //\n\t  /////////////////////////\n\t\n\t  /**\n\t   * Shortcut to create text nodes\n\t   * @param   string  text used to create DOM text node\n\t   * @return  Node  a DOM node with that text\n\t   */\n\t  function createText(text) {\n\t    return document.createTextNode(text);\n\t  }\n\t\n\t  /**\n\t   * Utility function to escape html attribute text\n\t   * @param   string  text use in HTML attribute\n\t   * @return  string  text encoded to use in HTML attribute\n\t   */\n\t  function escapeHTML(s) {\n\t    return s.replace(rescaper, replacer);\n\t  }\n\t\n\t  /**\n\t   * Default callback used to generate emoji src\n\t   *  based on Twitter CDN\n\t   * @param   string    the emoji codepoint string\n\t   * @param   string    the default size to use, i.e. \"36x36\"\n\t   * @return  string    the image source to use\n\t   */\n\t  function defaultImageSrcGenerator(icon, options) {\n\t    return ''.concat(options.base, options.size, '/', icon, options.ext);\n\t  }\n\t\n\t  /**\n\t   * Given a generic DOM nodeType 1, walk through all children\n\t   * and store every nodeType 3 (#text) found in the tree.\n\t   * @param   Element a DOM Element with probably some text in it\n\t   * @param   Array the list of previously discovered text nodes\n\t   * @return  Array same list with new discovered nodes, if any\n\t   */\n\t  function grabAllTextNodes(node, allText) {\n\t    var\n\t      childNodes = node.childNodes,\n\t      length = childNodes.length,\n\t      subnode,\n\t      nodeType;\n\t    while (length--) {\n\t      subnode = childNodes[length];\n\t      nodeType = subnode.nodeType;\n\t      // parse emoji only in text nodes\n\t      if (nodeType === 3) {\n\t        // collect them to process emoji later\n\t        allText.push(subnode);\n\t      }\n\t      // ignore all nodes that are not type 1 or that\n\t      // should not be parsed as script, style, and others\n\t      else if (nodeType === 1 && !shouldntBeParsed.test(subnode.nodeName)) {\n\t        grabAllTextNodes(subnode, allText);\n\t      }\n\t    }\n\t    return allText;\n\t  }\n\t\n\t  /**\n\t   * Used to both remove the possible variant\n\t   *  and to convert utf16 into code points.\n\t   *  If there is a zero-width-joiner (U+200D), leave the variants in.\n\t   * @param   string    the raw text of the emoji match\n\t   */\n\t  function grabTheRightIcon(rawText) {\n\t    // if variant is present as \\uFE0F\n\t    return toCodePoint(rawText.indexOf(U200D) < 0 ?\n\t      rawText.replace(UFE0Fg, '') :\n\t      rawText\n\t    );\n\t  }\n\t\n\t  /**\n\t   * DOM version of the same logic / parser:\n\t   *  emojify all found sub-text nodes placing images node instead.\n\t   * @param   Element   generic DOM node with some text in some child node\n\t   * @param   Object    options  containing info about how to parse\n\t    *\n\t    *            .callback   Function  the callback to invoke per each found emoji.\n\t    *            .base       string    the base url, by default twemoji.base\n\t    *            .ext        string    the image extension, by default twemoji.ext\n\t    *            .size       string    the assets size, by default twemoji.size\n\t    *\n\t   * @return  Element same generic node with emoji in place, if any.\n\t   */\n\t  function parseNode(node, options) {\n\t    var\n\t      allText = grabAllTextNodes(node, []),\n\t      length = allText.length,\n\t      attrib,\n\t      attrname,\n\t      modified,\n\t      fragment,\n\t      subnode,\n\t      text,\n\t      match,\n\t      i,\n\t      index,\n\t      img,\n\t      rawText,\n\t      iconId,\n\t      src;\n\t    while (length--) {\n\t      modified = false;\n\t      fragment = document.createDocumentFragment();\n\t      subnode = allText[length];\n\t      text = subnode.nodeValue;\n\t      i = 0;\n\t      while ((match = re.exec(text))) {\n\t        index = match.index;\n\t        if (index !== i) {\n\t          fragment.appendChild(\n\t            createText(text.slice(i, index))\n\t          );\n\t        }\n\t        rawText = match[0];\n\t        iconId = grabTheRightIcon(rawText);\n\t        i = index + rawText.length;\n\t        src = options.callback(iconId, options);\n\t        if (src) {\n\t          img = new Image();\n\t          img.onerror = options.onerror;\n\t          img.setAttribute('draggable', 'false');\n\t          attrib = options.attributes(rawText, iconId);\n\t          for (attrname in attrib) {\n\t            if (\n\t              attrib.hasOwnProperty(attrname) &&\n\t              // don't allow any handlers to be set + don't allow overrides\n\t              attrname.indexOf('on') !== 0 &&\n\t              !img.hasAttribute(attrname)\n\t            ) {\n\t              img.setAttribute(attrname, attrib[attrname]);\n\t            }\n\t          }\n\t          img.className = options.className;\n\t          img.alt = rawText;\n\t          img.src = src;\n\t          modified = true;\n\t          fragment.appendChild(img);\n\t        }\n\t        if (!img) fragment.appendChild(createText(rawText));\n\t        img = null;\n\t      }\n\t      // is there actually anything to replace in here ?\n\t      if (modified) {\n\t        // any text left to be added ?\n\t        if (i < text.length) {\n\t          fragment.appendChild(\n\t            createText(text.slice(i))\n\t          );\n\t        }\n\t        // replace the text node only, leave intact\n\t        // anything else surrounding such text\n\t        subnode.parentNode.replaceChild(fragment, subnode);\n\t      }\n\t    }\n\t    return node;\n\t  }\n\t\n\t  /**\n\t   * String/HTML version of the same logic / parser:\n\t   *  emojify a generic text placing images tags instead of surrogates pair.\n\t   * @param   string    generic string with possibly some emoji in it\n\t   * @param   Object    options  containing info about how to parse\n\t   *\n\t   *            .callback   Function  the callback to invoke per each found emoji.\n\t   *            .base       string    the base url, by default twemoji.base\n\t   *            .ext        string    the image extension, by default twemoji.ext\n\t   *            .size       string    the assets size, by default twemoji.size\n\t   *\n\t   * @return  the string with <img tags> replacing all found and parsed emoji\n\t   */\n\t  function parseString(str, options) {\n\t    return replace(str, function (rawText) {\n\t      var\n\t        ret = rawText,\n\t        iconId = grabTheRightIcon(rawText),\n\t        src = options.callback(iconId, options),\n\t        attrib,\n\t        attrname;\n\t      if (src) {\n\t        // recycle the match string replacing the emoji\n\t        // with its image counter part\n\t        ret = '<img '.concat(\n\t          'class=\"', options.className, '\" ',\n\t          'draggable=\"false\" ',\n\t          // needs to preserve user original intent\n\t          // when variants should be copied and pasted too\n\t          'alt=\"',\n\t          rawText,\n\t          '\"',\n\t          ' src=\"',\n\t          src,\n\t          '\"'\n\t        );\n\t        attrib = options.attributes(rawText, iconId);\n\t        for (attrname in attrib) {\n\t          if (\n\t            attrib.hasOwnProperty(attrname) &&\n\t            // don't allow any handlers to be set + don't allow overrides\n\t            attrname.indexOf('on') !== 0 &&\n\t            ret.indexOf(' ' + attrname + '=') === -1\n\t          ) {\n\t            ret = ret.concat(' ', attrname, '=\"', escapeHTML(attrib[attrname]), '\"');\n\t          }\n\t        }\n\t        ret = ret.concat('>');\n\t      }\n\t      return ret;\n\t    });\n\t  }\n\t\n\t  /**\n\t   * Function used to actually replace HTML special chars\n\t   * @param   string  HTML special char\n\t   * @return  string  encoded HTML special char\n\t   */\n\t  function replacer(m) {\n\t    return escaper[m];\n\t  }\n\t\n\t  /**\n\t   * Default options.attribute callback\n\t   * @return  null\n\t   */\n\t  function returnNull() {\n\t    return null;\n\t  }\n\t\n\t  /**\n\t   * Given a generic value, creates its squared counterpart if it's a number.\n\t   *  As example, number 36 will return '36x36'.\n\t   * @param   any     a generic value.\n\t   * @return  any     a string representing asset size, i.e. \"36x36\"\n\t   *                  only in case the value was a number.\n\t   *                  Returns initial value otherwise.\n\t   */\n\t  function toSizeSquaredAsset(value) {\n\t    return typeof value === 'number' ?\n\t      value + 'x' + value :\n\t      value;\n\t  }\n\t\n\t\n\t  /////////////////////////\n\t  //  exported functions //\n\t  //     declaration     //\n\t  /////////////////////////\n\t\n\t  function fromCodePoint(codepoint) {\n\t    var code = typeof codepoint === 'string' ?\n\t          parseInt(codepoint, 16) : codepoint;\n\t    if (code < 0x10000) {\n\t      return fromCharCode(code);\n\t    }\n\t    code -= 0x10000;\n\t    return fromCharCode(\n\t      0xD800 + (code >> 10),\n\t      0xDC00 + (code & 0x3FF)\n\t    );\n\t  }\n\t\n\t  function parse(what, how) {\n\t    if (!how || typeof how === 'function') {\n\t      how = {callback: how};\n\t    }\n\t    // if first argument is string, inject html <img> tags\n\t    // otherwise use the DOM tree and parse text nodes only\n\t    return (typeof what === 'string' ? parseString : parseNode)(what, {\n\t      callback:   how.callback || defaultImageSrcGenerator,\n\t      attributes: typeof how.attributes === 'function' ? how.attributes : returnNull,\n\t      base:       typeof how.base === 'string' ? how.base : twemoji.base,\n\t      ext:        how.ext || twemoji.ext,\n\t      size:       how.folder || toSizeSquaredAsset(how.size || twemoji.size),\n\t      className:  how.className || twemoji.className,\n\t      onerror:    how.onerror || twemoji.onerror\n\t    });\n\t  }\n\t\n\t  function replace(text, callback) {\n\t    return String(text).replace(re, callback);\n\t  }\n\t\n\t  function test(text) {\n\t    // IE6 needs a reset before too\n\t    re.lastIndex = 0;\n\t    var result = re.test(text);\n\t    re.lastIndex = 0;\n\t    return result;\n\t  }\n\t\n\t  function toCodePoint(unicodeSurrogates, sep) {\n\t    var\n\t      r = [],\n\t      c = 0,\n\t      p = 0,\n\t      i = 0;\n\t    while (i < unicodeSurrogates.length) {\n\t      c = unicodeSurrogates.charCodeAt(i++);\n\t      if (p) {\n\t        r.push((0x10000 + ((p - 0xD800) << 10) + (c - 0xDC00)).toString(16));\n\t        p = 0;\n\t      } else if (0xD800 <= c && c <= 0xDBFF) {\n\t        p = c;\n\t      } else {\n\t        r.push(c.toString(16));\n\t      }\n\t    }\n\t    return r.join(sep || '-');\n\t  }\n\t\n\t}());\n\tif (!location.protocol) {\n\t  twemoji.base = twemoji.base.replace(/^http:/, \"\");\n\t}\n\tmodule.exports = twemoji;\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ }\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// 1c6cbdb0f141e0aacbf5.worker.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/public/assets/js/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 1c6cbdb0f141e0aacbf5","/*jslint node: true */\n'use strict';\n\n// importScripts('https://cdnjs.cloudflare.com/ajax/libs/twemoji/1.2.1/twemoji.min.js');\nvar twemoji = require('twemoji');\n\nlet ALL_PARTICIPANTS = {};\nlet CONVERSATION_LIST = [];\nlet CONVERSATIONS = {};\n\nfunction zeroPad(string) {\n\treturn (string < 10) ? \"0\" + string : string;\n}\n\nfunction formatTimestamp(timestamp) {\n\tvar d = new Date(timestamp/1000);\n\tvar formattedDate = d.getFullYear() + \"-\" +\n\t    zeroPad(d.getMonth() + 1) + \"-\" +\n\t    zeroPad(d.getDate());\n\tvar hours = zeroPad(d.getHours());\n\tvar minutes = zeroPad(d.getMinutes());\n\tvar formattedTime = hours + \":\" + minutes;\n\treturn formattedDate + \" \" + formattedTime;\n}\n\nfunction getParticipantsAndConversationList(data){\n\tlet g_conversation_list = data.conversation_state;\n\n\tlet conversationList = g_conversation_list.map(function(item){\n\t\tlet g_participant_data = item.conversation_state.conversation.participant_data;\n\t\tlet g_conversation_id = item.conversation_id.id;\n\n\t\t// Get all participants\n\t\tlet participants = g_participant_data.map(function(participant){\n\t\t\tif(!participant.fallback_name || participant.fallback_name === null){\n\t\t\t\tlet unknown_constant = -1;\n\t\t\t\tALL_PARTICIPANTS[unknown_constant] = {};\n\t\t\t\tALL_PARTICIPANTS[unknown_constant][g_conversation_id] = 'Unknown';\n\n\t\t\t\treturn {\n\t\t\t\t\tname_id: -1,\n\t\t\t\t\tname: 'Unknown'\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tlet fallback_name = participant.fallback_name;\n\t\t\t\tlet gaia_id = participant.id.gaia_id;\n\n\t\t\t\tif (ALL_PARTICIPANTS[gaia_id]){\n\t\t\t\t\tALL_PARTICIPANTS[gaia_id][g_conversation_id] = fallback_name;\n\t\t\t\t} else {\n\t\t\t\t\tALL_PARTICIPANTS[gaia_id] = {};\n\t\t\t\t\tALL_PARTICIPANTS[gaia_id][g_conversation_id] = fallback_name;\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tname_id: gaia_id,\n\t\t\t\t\tname: fallback_name\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t});\n\n\t\tlet list = '';\n\t\tparticipants.map(function(item){\n\t\t\tlist = list + ', ' + item.name;\n\t\t});\n\t\tlist = list.substr(2);\n\n\t\treturn {\n\t\t\tid: g_conversation_id, \n\t\t\tparticipants,\n\t\t\tlist\n\t\t};\n\n\t});\n\n\treturn conversationList;\n}\n\n\nfunction getConversations(data){\n\tlet conversation_states = data.conversation_state;\n\n\tlet result = conversation_states.map(function(item){\n\t\tlet g_conversation_id = item.conversation_id.id;\n\t\tlet g_events = item.conversation_state.event;\n\n\t\tlet history = g_events.map(function(event){\n\t\t\tlet timestamp = event.timestamp;\n\t\t\tlet msgtime = formatTimestamp(timestamp);\n\t\t\tlet sender = event.sender_id.gaia_id;\n\t\t\tlet sender_name = 'Unknown';\n\t\t\tlet content = {\n\t\t\t\tmessage: '',\n\t\t\t\tphoto: {\n\t\t\t\t\turl: '',\n\t\t\t\t\tthumbnail: ''\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tif (event.chat_message){\n\t\t\t\tlet chatMsg = event.chat_message;\n\t\t\t\tlet segments = chatMsg.message_content.segment;\n\t\t\t\tlet attachments = chatMsg.message_content.attachment;\n\t\t\t\t\n\t\t\t\t// Try and get messages\n\t\t\t\tif (segments){\n\t\t\t\t\tcontent.message = segments.reduce(function(acc, segment){\n\t\t\t\t\t\tif (segment.text){\n\t\t\t\t\t\t\treturn acc + twemoji.parse(segment.text);\n\t\t\t\t\t\t}\n\t\t\t\t\t}, '');\n\t\t\t\t}\n\n\t\t\t\t// Try and get photos\n\t\t\t\tif (attachments){\n\t\t\t\t\tcontent.photo = attachments.map(function(attachment){\n\t\t\t\t\t\tif (attachment.embed_item.type[0] === \"PLUS_PHOTO\"){\n\t\t\t\t\t\t\treturn { \n\t\t\t\t\t\t\t\turl: attachment.embed_item['embeds.PlusPhoto.plus_photo'].url,\n\t\t\t\t\t\t\t\tthumbnail: attachment.embed_item['embeds.PlusPhoto.plus_photo'].thumbnail.image_url\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\turl: '',\n\t\t\t\t\t\t\t\tthumbnail: ''\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\t// seems like only one photo shows up every time\n\t\t\t\t\tcontent.photo = content.photo[0];\n\t\t\t\t}\n\n\t\t\t} else if (event.event_type === 'HANGOUT_EVENT'){\n\t\t\t\tif (event.hangout_event.media_type === 'AUDIO_ONLY'){\n\t\t\t\t\tif (event.hangout_event.hangout_duration_secs){\n\t\t\t\t\t\tcontent.message = 'Voice Call: ' + event.hangout_event.hangout_duration_secs + ' seconds';\t\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcontent.message = 'Failed voice call.';\n\t\t\t\t\t}\n\t\t\t\t} else if (event.hangout_event.media_type === 'AUDIO_VIDEO') {\n\t\t\t\t\tif (event.hangout_event.hangout_duration_secs){\n\t\t\t\t\t\tcontent.message = 'Video Call: ' + event.hangout_event.hangout_duration_secs + ' seconds';\t\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcontent.message = 'Failed video call.';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (ALL_PARTICIPANTS[sender]){\n\t\t\t\tsender_name = ALL_PARTICIPANTS[sender][g_conversation_id];\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t// msgTime: msgTime,\n\t\t\t\tsender_id: sender,\n\t\t\t\tsender_name,\n\t\t\t\ttimestamp,\n\t\t\t\tmsgtime, \n\t\t\t\tcontent\n\t\t\t};\n\n\t\t});\n\n\t\t// Sort events by timestamp\n\t\thistory.sort(function(a, b){\n\t\t\tvar keyA = a.timestamp,\n\t\t\t    keyB = b.timestamp;\n\t\t\tif( keyA < keyB ) { return -1; }\n\t\t\tif( keyA > keyB ) { return 1; }\n\t\t\treturn 0;\n\t\t});\n\n\t\treturn {\n\t\t\tconversation_id: g_conversation_id,\n\t\t\thistory\n\t\t};\n\n\t});\n\n\treturn result;\n}\n\n\n\n\n\n\n\n\nfunction handleFile(data){\n\n\tlet Hangouts = JSON.parse(data);\n\tCONVERSATION_LIST = getParticipantsAndConversationList(Hangouts);\n\tCONVERSATIONS = getConversations(Hangouts);\n\t// console.log(CONVERSATION_LIST);\n\t// console.log(CONVERSATIONS);\n\t// console.log(result.conversation_list);\n\t// console.log(result.conversations);\n\t// console.log(result.all_participants);\n\t\n\tlet conversations = new Map();\n\tCONVERSATIONS.map(function(item){\n\t\t// console.log(item.conversation_id);\n\t\tconversations.set(item.conversation_id, item.history);\t\n\t});\n\t// console.log(conversations.get('UgylVwHUsKjYT5sSElJ4AaABAQ'));\n\n\n\t// createVueStuff(CONVERSATION_LIST, conversations);\n\t// vueInstance.conversation_list = CONVERSATION_LIST;\n\t// GLOBAL_conversations = conversations;\n\t// \n\tconsole.log(CONVERSATION_LIST);\n\n\treturn [CONVERSATION_LIST, conversations];\n}\n\n\n\n\nself.onmessage = function(e) {\n\tif (e.data.file){\n\t\tself.postMessage(\"see a file\");\n\n\t\tvar file = e.data.file;\n\t\tvar reader = new FileReader();\n\t\treader.readAsText(file, \"UTF-8\");\n\n\t\tconsole.log(\"started reading file\");\n\n\t\treader.onload = (function(worker){\n\t\t\treturn function(evt){\n\n\t\t\t\tconsole.log(\"Loaded: \" + evt.target.result.length);\n\t\t\t\t// observer.next(evt.target.result);\n\t\t\t\tlet result = handleFile(evt.target.result);\n\n\t\t\t\t// createVueStuff(CONVERSATION_LIST, conversations);\n\t\t\t\tlet conversation_list = result[0];\n\t\t\t\tlet conversations = result[1];\n\n\t\t\t\tworker.postMessage({\n\t\t\t\t\tconversation_list,\n\t\t\t\t\tconversations\n\t\t\t\t});\n\t\t\t};\n\t\t})(self);\n\n\t\treader.onerror = (function(worker){\n\t\t\treturn function(err){\n\t\t\t\tworker.postMessage(err);\n\t\t\t};\n\t\t})(self);\n\t}\n};\n\n\n\n// WEBPACK FOOTER //\n// ./js/uploadfile-worker.js","var location = global.location || {};\n/*jslint indent: 2, browser: true, bitwise: true, plusplus: true */\nvar twemoji = (function (\n  /*! Copyright Twitter Inc. and other contributors. Licensed under MIT *//*\n    https://github.com/twitter/twemoji/blob/gh-pages/LICENSE\n  */\n\n  // WARNING:   this file is generated automatically via\n  //            `node twemoji-generator.js`\n  //            please update its `createTwemoji` function\n  //            at the bottom of the same file instead.\n\n) {\n  'use strict';\n\n  /*jshint maxparams:4 */\n\n  var\n    // the exported module object\n    twemoji = {\n\n\n    /////////////////////////\n    //      properties     //\n    /////////////////////////\n\n      // default assets url, by default will be Twitter Inc. CDN\n      base: 'https://twemoji.maxcdn.com/2/',\n\n      // default assets file extensions, by default '.png'\n      ext: '.png',\n\n      // default assets/folder size, by default \"72x72\"\n      // available via Twitter CDN: 72\n      size: '72x72',\n\n      // default class name, by default 'emoji'\n      className: 'emoji',\n\n      // basic utilities / helpers to convert code points\n      // to JavaScript surrogates and vice versa\n      convert: {\n\n        /**\n         * Given an HEX codepoint, returns UTF16 surrogate pairs.\n         *\n         * @param   string  generic codepoint, i.e. '1F4A9'\n         * @return  string  codepoint transformed into utf16 surrogates pair,\n         *          i.e. \\uD83D\\uDCA9\n         *\n         * @example\n         *  twemoji.convert.fromCodePoint('1f1e8');\n         *  // \"\\ud83c\\udde8\"\n         *\n         *  '1f1e8-1f1f3'.split('-').map(twemoji.convert.fromCodePoint).join('')\n         *  // \"\\ud83c\\udde8\\ud83c\\uddf3\"\n         */\n        fromCodePoint: fromCodePoint,\n\n        /**\n         * Given UTF16 surrogate pairs, returns the equivalent HEX codepoint.\n         *\n         * @param   string  generic utf16 surrogates pair, i.e. \\uD83D\\uDCA9\n         * @param   string  optional separator for double code points, default='-'\n         * @return  string  utf16 transformed into codepoint, i.e. '1F4A9'\n         *\n         * @example\n         *  twemoji.convert.toCodePoint('\\ud83c\\udde8\\ud83c\\uddf3');\n         *  // \"1f1e8-1f1f3\"\n         *\n         *  twemoji.convert.toCodePoint('\\ud83c\\udde8\\ud83c\\uddf3', '~');\n         *  // \"1f1e8~1f1f3\"\n         */\n        toCodePoint: toCodePoint\n      },\n\n\n    /////////////////////////\n    //       methods       //\n    /////////////////////////\n\n      /**\n       * User first: used to remove missing images\n       * preserving the original text intent when\n       * a fallback for network problems is desired.\n       * Automatically added to Image nodes via DOM\n       * It could be recycled for string operations via:\n       *  $('img.emoji').on('error', twemoji.onerror)\n       */\n      onerror: function onerror() {\n        if (this.parentNode) {\n          this.parentNode.replaceChild(createText(this.alt), this);\n        }\n      },\n\n      /**\n       * Main method/logic to generate either <img> tags or HTMLImage nodes.\n       *  \"emojify\" a generic text or DOM Element.\n       *\n       * @overloads\n       *\n       * String replacement for `innerHTML` or server side operations\n       *  twemoji.parse(string);\n       *  twemoji.parse(string, Function);\n       *  twemoji.parse(string, Object);\n       *\n       * HTMLElement tree parsing for safer operations over existing DOM\n       *  twemoji.parse(HTMLElement);\n       *  twemoji.parse(HTMLElement, Function);\n       *  twemoji.parse(HTMLElement, Object);\n       *\n       * @param   string|HTMLElement  the source to parse and enrich with emoji.\n       *\n       *          string              replace emoji matches with <img> tags.\n       *                              Mainly used to inject emoji via `innerHTML`\n       *                              It does **not** parse the string or validate it,\n       *                              it simply replaces found emoji with a tag.\n       *                              NOTE: be sure this won't affect security.\n       *\n       *          HTMLElement         walk through the DOM tree and find emoji\n       *                              that are inside **text node only** (nodeType === 3)\n       *                              Mainly used to put emoji in already generated DOM\n       *                              without compromising surrounding nodes and\n       *                              **avoiding** the usage of `innerHTML`.\n       *                              NOTE: Using DOM elements instead of strings should\n       *                              improve security without compromising too much\n       *                              performance compared with a less safe `innerHTML`.\n       *\n       * @param   Function|Object  [optional]\n       *                              either the callback that will be invoked or an object\n       *                              with all properties to use per each found emoji.\n       *\n       *          Function            if specified, this will be invoked per each emoji\n       *                              that has been found through the RegExp except\n       *                              those follwed by the invariant \\uFE0E (\"as text\").\n       *                              Once invoked, parameters will be:\n       *\n       *                                iconId:string     the lower case HEX code point\n       *                                                  i.e. \"1f4a9\"\n       *\n       *                                options:Object    all info for this parsing operation\n       *\n       *                                variant:char      the optional \\uFE0F (\"as image\")\n       *                                                  variant, in case this info\n       *                                                  is anyhow meaningful.\n       *                                                  By default this is ignored.\n       *\n       *                              If such callback will return a falsy value instead\n       *                              of a valid `src` to use for the image, nothing will\n       *                              actually change for that specific emoji.\n       *\n       *\n       *          Object              if specified, an object containing the following properties\n       *\n       *            callback   Function  the callback to invoke per each found emoji.\n       *            base       string    the base url, by default twemoji.base\n       *            ext        string    the image extension, by default twemoji.ext\n       *            size       string    the assets size, by default twemoji.size\n       *\n       * @example\n       *\n       *  twemoji.parse(\"I \\u2764\\uFE0F emoji!\");\n       *  // I <img class=\"emoji\" draggable=\"false\" alt=\"❤️\" src=\"/assets/2764.gif\"> emoji!\n       *\n       *\n       *  twemoji.parse(\"I \\u2764\\uFE0F emoji!\", function(iconId, options) {\n       *    return '/assets/' + iconId + '.gif';\n       *  });\n       *  // I <img class=\"emoji\" draggable=\"false\" alt=\"❤️\" src=\"/assets/2764.gif\"> emoji!\n       *\n       *\n       * twemoji.parse(\"I \\u2764\\uFE0F emoji!\", {\n       *   size: 72,\n       *   callback: function(iconId, options) {\n       *     return '/assets/' + options.size + '/' + iconId + options.ext;\n       *   }\n       * });\n       *  // I <img class=\"emoji\" draggable=\"false\" alt=\"❤️\" src=\"/assets/72x72/2764.png\"> emoji!\n       *\n       */\n      parse: parse,\n\n      /**\n       * Given a string, invokes the callback argument\n       *  per each emoji found in such string.\n       * This is the most raw version used by\n       *  the .parse(string) method itself.\n       *\n       * @param   string    generic string to parse\n       * @param   Function  a generic callback that will be\n       *                    invoked to replace the content.\n       *                    This calback wil receive standard\n       *                    String.prototype.replace(str, callback)\n       *                    arguments such:\n       *  callback(\n       *    rawText,  // the emoji match\n       *  );\n       *\n       *                    and others commonly received via replace.\n       */\n      replace: replace,\n\n      /**\n       * Simplify string tests against emoji.\n       *\n       * @param   string  some text that might contain emoji\n       * @return  boolean true if any emoji was found, false otherwise.\n       *\n       * @example\n       *\n       *  if (twemoji.test(someContent)) {\n       *    console.log(\"emoji All The Things!\");\n       *  }\n       */\n      test: test\n    },\n\n    // used to escape HTML special chars in attributes\n    escaper = {\n      '&': '&amp;',\n      '<': '&lt;',\n      '>': '&gt;',\n      \"'\": '&#39;',\n      '\"': '&quot;'\n    },\n\n    // RegExp based on emoji's official Unicode standards\n    // http://www.unicode.org/Public/UNIDATA/EmojiSources.txt\n    re = /\\ud83d[\\udc68-\\udc69](?:\\ud83c[\\udffb-\\udfff])?\\u200d(?:\\u2695\\ufe0f|\\u2696\\ufe0f|\\u2708\\ufe0f|\\ud83c[\\udf3e\\udf73\\udf93\\udfa4\\udfa8\\udfeb\\udfed]|\\ud83d[\\udcbb\\udcbc\\udd27\\udd2c\\ude80\\ude92])|(?:\\ud83c[\\udfcb\\udfcc]|\\ud83d\\udd75|\\u26f9)(?:\\ufe0f|\\ud83c[\\udffb-\\udfff])\\u200d[\\u2640\\u2642]\\ufe0f|(?:\\ud83c[\\udfc3\\udfc4\\udfca]|\\ud83d[\\udc6e\\udc71\\udc73\\udc77\\udc81\\udc82\\udc86\\udc87\\ude45-\\ude47\\ude4b\\ude4d\\ude4e\\udea3\\udeb4-\\udeb6]|\\ud83e[\\udd26\\udd37-\\udd39\\udd3d\\udd3e])(?:\\ud83c[\\udffb-\\udfff])?\\u200d[\\u2640\\u2642]\\ufe0f|\\ud83d\\udc68\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc68|\\ud83d\\udc68\\u200d\\ud83d\\udc68\\u200d\\ud83d\\udc66\\u200d\\ud83d\\udc66|\\ud83d\\udc68\\u200d\\ud83d\\udc68\\u200d\\ud83d\\udc67\\u200d\\ud83d[\\udc66\\udc67]|\\ud83d\\udc68\\u200d\\ud83d\\udc69\\u200d\\ud83d\\udc66\\u200d\\ud83d\\udc66|\\ud83d\\udc68\\u200d\\ud83d\\udc69\\u200d\\ud83d\\udc67\\u200d\\ud83d[\\udc66\\udc67]|\\ud83d\\udc69\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d[\\udc68\\udc69]|\\ud83d\\udc69\\u200d\\ud83d\\udc69\\u200d\\ud83d\\udc66\\u200d\\ud83d\\udc66|\\ud83d\\udc69\\u200d\\ud83d\\udc69\\u200d\\ud83d\\udc67\\u200d\\ud83d[\\udc66\\udc67]|\\ud83d\\udc68\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc68|\\ud83d\\udc68\\u200d\\ud83d\\udc66\\u200d\\ud83d\\udc66|\\ud83d\\udc68\\u200d\\ud83d\\udc67\\u200d\\ud83d[\\udc66\\udc67]|\\ud83d\\udc68\\u200d\\ud83d\\udc68\\u200d\\ud83d[\\udc66\\udc67]|\\ud83d\\udc68\\u200d\\ud83d\\udc69\\u200d\\ud83d[\\udc66\\udc67]|\\ud83d\\udc69\\u200d\\u2764\\ufe0f\\u200d\\ud83d[\\udc68\\udc69]|\\ud83d\\udc69\\u200d\\ud83d\\udc66\\u200d\\ud83d\\udc66|\\ud83d\\udc69\\u200d\\ud83d\\udc67\\u200d\\ud83d[\\udc66\\udc67]|\\ud83d\\udc69\\u200d\\ud83d\\udc69\\u200d\\ud83d[\\udc66\\udc67]|\\ud83c\\udff3\\ufe0f\\u200d\\ud83c\\udf08|\\ud83c\\udff4\\u200d\\u2620\\ufe0f|\\ud83d\\udc41\\u200d\\ud83d\\udde8|\\ud83d\\udc68\\u200d\\ud83d[\\udc66\\udc67]|\\ud83d\\udc69\\u200d\\ud83d[\\udc66\\udc67]|\\ud83d\\udc6f\\u200d\\u2640\\ufe0f|\\ud83d\\udc6f\\u200d\\u2642\\ufe0f|\\ud83e\\udd3c\\u200d\\u2640\\ufe0f|\\ud83e\\udd3c\\u200d\\u2642\\ufe0f|(?:[\\u0023\\u002a\\u0030-\\u0039])\\ufe0f?\\u20e3|(?:(?:\\ud83c[\\udfcb\\udfcc]|\\ud83d[\\udd74\\udd75\\udd90]|[\\u261d\\u26f7\\u26f9\\u270c\\u270d])(?:\\ufe0f|(?!\\ufe0e))|\\ud83c[\\udf85\\udfc2-\\udfc4\\udfc7\\udfca]|\\ud83d[\\udc42\\udc43\\udc46-\\udc50\\udc66-\\udc69\\udc6e\\udc70-\\udc78\\udc7c\\udc81-\\udc83\\udc85-\\udc87\\udcaa\\udd7a\\udd95\\udd96\\ude45-\\ude47\\ude4b-\\ude4f\\udea3\\udeb4-\\udeb6\\udec0\\udecc]|\\ud83e[\\udd18-\\udd1c\\udd1e\\udd26\\udd30\\udd33-\\udd39\\udd3d\\udd3e]|[\\u270a\\u270b])(?:\\ud83c[\\udffb-\\udfff]|)|\\ud83c\\udde6\\ud83c[\\udde8-\\uddec\\uddee\\uddf1\\uddf2\\uddf4\\uddf6-\\uddfa\\uddfc\\uddfd\\uddff]|\\ud83c\\udde7\\ud83c[\\udde6\\udde7\\udde9-\\uddef\\uddf1-\\uddf4\\uddf6-\\uddf9\\uddfb\\uddfc\\uddfe\\uddff]|\\ud83c\\udde8\\ud83c[\\udde6\\udde8\\udde9\\uddeb-\\uddee\\uddf0-\\uddf5\\uddf7\\uddfa-\\uddff]|\\ud83c\\udde9\\ud83c[\\uddea\\uddec\\uddef\\uddf0\\uddf2\\uddf4\\uddff]|\\ud83c\\uddea\\ud83c[\\udde6\\udde8\\uddea\\uddec\\udded\\uddf7-\\uddfa]|\\ud83c\\uddeb\\ud83c[\\uddee-\\uddf0\\uddf2\\uddf4\\uddf7]|\\ud83c\\uddec\\ud83c[\\udde6\\udde7\\udde9-\\uddee\\uddf1-\\uddf3\\uddf5-\\uddfa\\uddfc\\uddfe]|\\ud83c\\udded\\ud83c[\\uddf0\\uddf2\\uddf3\\uddf7\\uddf9\\uddfa]|\\ud83c\\uddee\\ud83c[\\udde8-\\uddea\\uddf1-\\uddf4\\uddf6-\\uddf9]|\\ud83c\\uddef\\ud83c[\\uddea\\uddf2\\uddf4\\uddf5]|\\ud83c\\uddf0\\ud83c[\\uddea\\uddec-\\uddee\\uddf2\\uddf3\\uddf5\\uddf7\\uddfc\\uddfe\\uddff]|\\ud83c\\uddf1\\ud83c[\\udde6-\\udde8\\uddee\\uddf0\\uddf7-\\uddfb\\uddfe]|\\ud83c\\uddf2\\ud83c[\\udde6\\udde8-\\udded\\uddf0-\\uddff]|\\ud83c\\uddf3\\ud83c[\\udde6\\udde8\\uddea-\\uddec\\uddee\\uddf1\\uddf4\\uddf5\\uddf7\\uddfa\\uddff]|\\ud83c\\uddf4\\ud83c\\uddf2|\\ud83c\\uddf5\\ud83c[\\udde6\\uddea-\\udded\\uddf0-\\uddf3\\uddf7-\\uddf9\\uddfc\\uddfe]|\\ud83c\\uddf6\\ud83c\\udde6|\\ud83c\\uddf7\\ud83c[\\uddea\\uddf4\\uddf8\\uddfa\\uddfc]|\\ud83c\\uddf8\\ud83c[\\udde6-\\uddea\\uddec-\\uddf4\\uddf7-\\uddf9\\uddfb\\uddfd-\\uddff]|\\ud83c\\uddf9\\ud83c[\\udde6\\udde8\\udde9\\uddeb-\\udded\\uddef-\\uddf4\\uddf7\\uddf9\\uddfb\\uddfc\\uddff]|\\ud83c\\uddfa\\ud83c[\\udde6\\uddec\\uddf2\\uddf3\\uddf8\\uddfe\\uddff]|\\ud83c\\uddfb\\ud83c[\\udde6\\udde8\\uddea\\uddec\\uddee\\uddf3\\uddfa]|\\ud83c\\uddfc\\ud83c[\\uddeb\\uddf8]|\\ud83c\\uddfd\\ud83c\\uddf0|\\ud83c\\uddfe\\ud83c[\\uddea\\uddf9]|\\ud83c\\uddff\\ud83c[\\udde6\\uddf2\\uddfc]|\\ud800\\udc00|\\ud83c[\\udccf\\udd8e\\udd91-\\udd9a\\udde6-\\uddff\\ude01\\ude32-\\ude36\\ude38-\\ude3a\\ude50\\ude51\\udf00-\\udf20\\udf2d-\\udf35\\udf37-\\udf7c\\udf7e-\\udf84\\udf86-\\udf93\\udfa0-\\udfc1\\udfc5\\udfc6\\udfc8\\udfc9\\udfcf-\\udfd3\\udfe0-\\udff0\\udff4\\udff8-\\udfff]|\\ud83d[\\udc00-\\udc3e\\udc40\\udc44\\udc45\\udc51-\\udc65\\udc6a-\\udc6d\\udc6f\\udc79-\\udc7b\\udc7d-\\udc80\\udc84\\udc88-\\udca9\\udcab-\\udcfc\\udcff-\\udd3d\\udd4b-\\udd4e\\udd50-\\udd67\\udda4\\uddfb-\\ude44\\ude48-\\ude4a\\ude80-\\udea2\\udea4-\\udeb3\\udeb7-\\udebf\\udec1-\\udec5\\uded0-\\uded2\\udeeb\\udeec\\udef4-\\udef6]|\\ud83e[\\udd10-\\udd17\\udd1d\\udd20-\\udd25\\udd27\\udd3a\\udd3c\\udd40-\\udd45\\udd47-\\udd4b\\udd50-\\udd5e\\udd80-\\udd91\\uddc0]|[\\u23e9-\\u23ec\\u23f0\\u23f3\\u2640\\u2642\\u2695\\u26ce\\u2705\\u2728\\u274c\\u274e\\u2753-\\u2755\\u2795-\\u2797\\u27b0\\u27bf\\ue50a]|(?:\\ud83c[\\udc04\\udd70\\udd71\\udd7e\\udd7f\\ude02\\ude1a\\ude2f\\ude37\\udf21\\udf24-\\udf2c\\udf36\\udf7d\\udf96\\udf97\\udf99-\\udf9b\\udf9e\\udf9f\\udfcd\\udfce\\udfd4-\\udfdf\\udff3\\udff5\\udff7]|\\ud83d[\\udc3f\\udc41\\udcfd\\udd49\\udd4a\\udd6f\\udd70\\udd73\\udd76-\\udd79\\udd87\\udd8a-\\udd8d\\udda5\\udda8\\uddb1\\uddb2\\uddbc\\uddc2-\\uddc4\\uddd1-\\uddd3\\udddc-\\uddde\\udde1\\udde3\\udde8\\uddef\\uddf3\\uddfa\\udecb\\udecd-\\udecf\\udee0-\\udee5\\udee9\\udef0\\udef3]|[\\u00a9\\u00ae\\u203c\\u2049\\u2122\\u2139\\u2194-\\u2199\\u21a9\\u21aa\\u231a\\u231b\\u2328\\u23cf\\u23ed-\\u23ef\\u23f1\\u23f2\\u23f8-\\u23fa\\u24c2\\u25aa\\u25ab\\u25b6\\u25c0\\u25fb-\\u25fe\\u2600-\\u2604\\u260e\\u2611\\u2614\\u2615\\u2618\\u2620\\u2622\\u2623\\u2626\\u262a\\u262e\\u262f\\u2638-\\u263a\\u2648-\\u2653\\u2660\\u2663\\u2665\\u2666\\u2668\\u267b\\u267f\\u2692-\\u2694\\u2696\\u2697\\u2699\\u269b\\u269c\\u26a0\\u26a1\\u26aa\\u26ab\\u26b0\\u26b1\\u26bd\\u26be\\u26c4\\u26c5\\u26c8\\u26cf\\u26d1\\u26d3\\u26d4\\u26e9\\u26ea\\u26f0-\\u26f5\\u26f8\\u26fa\\u26fd\\u2702\\u2708\\u2709\\u270f\\u2712\\u2714\\u2716\\u271d\\u2721\\u2733\\u2734\\u2744\\u2747\\u2757\\u2763\\u2764\\u27a1\\u2934\\u2935\\u2b05-\\u2b07\\u2b1b\\u2b1c\\u2b50\\u2b55\\u3030\\u303d\\u3297\\u3299])(?:\\ufe0f|(?!\\ufe0e))/g,\n\n    // avoid runtime RegExp creation for not so smart,\n    // not JIT based, and old browsers / engines\n    UFE0Fg = /\\uFE0F/g,\n\n    // avoid using a string literal like '\\u200D' here because minifiers expand it inline\n    U200D = String.fromCharCode(0x200D),\n\n    // used to find HTML special chars in attributes\n    rescaper = /[&<>'\"]/g,\n\n    // nodes with type 1 which should **not** be parsed (including lower case svg)\n    shouldntBeParsed = /IFRAME|NOFRAMES|NOSCRIPT|SCRIPT|SELECT|STYLE|TEXTAREA|[a-z]/,\n\n    // just a private shortcut\n    fromCharCode = String.fromCharCode;\n\n  return twemoji;\n\n\n  /////////////////////////\n  //  private functions  //\n  //     declaration     //\n  /////////////////////////\n\n  /**\n   * Shortcut to create text nodes\n   * @param   string  text used to create DOM text node\n   * @return  Node  a DOM node with that text\n   */\n  function createText(text) {\n    return document.createTextNode(text);\n  }\n\n  /**\n   * Utility function to escape html attribute text\n   * @param   string  text use in HTML attribute\n   * @return  string  text encoded to use in HTML attribute\n   */\n  function escapeHTML(s) {\n    return s.replace(rescaper, replacer);\n  }\n\n  /**\n   * Default callback used to generate emoji src\n   *  based on Twitter CDN\n   * @param   string    the emoji codepoint string\n   * @param   string    the default size to use, i.e. \"36x36\"\n   * @return  string    the image source to use\n   */\n  function defaultImageSrcGenerator(icon, options) {\n    return ''.concat(options.base, options.size, '/', icon, options.ext);\n  }\n\n  /**\n   * Given a generic DOM nodeType 1, walk through all children\n   * and store every nodeType 3 (#text) found in the tree.\n   * @param   Element a DOM Element with probably some text in it\n   * @param   Array the list of previously discovered text nodes\n   * @return  Array same list with new discovered nodes, if any\n   */\n  function grabAllTextNodes(node, allText) {\n    var\n      childNodes = node.childNodes,\n      length = childNodes.length,\n      subnode,\n      nodeType;\n    while (length--) {\n      subnode = childNodes[length];\n      nodeType = subnode.nodeType;\n      // parse emoji only in text nodes\n      if (nodeType === 3) {\n        // collect them to process emoji later\n        allText.push(subnode);\n      }\n      // ignore all nodes that are not type 1 or that\n      // should not be parsed as script, style, and others\n      else if (nodeType === 1 && !shouldntBeParsed.test(subnode.nodeName)) {\n        grabAllTextNodes(subnode, allText);\n      }\n    }\n    return allText;\n  }\n\n  /**\n   * Used to both remove the possible variant\n   *  and to convert utf16 into code points.\n   *  If there is a zero-width-joiner (U+200D), leave the variants in.\n   * @param   string    the raw text of the emoji match\n   */\n  function grabTheRightIcon(rawText) {\n    // if variant is present as \\uFE0F\n    return toCodePoint(rawText.indexOf(U200D) < 0 ?\n      rawText.replace(UFE0Fg, '') :\n      rawText\n    );\n  }\n\n  /**\n   * DOM version of the same logic / parser:\n   *  emojify all found sub-text nodes placing images node instead.\n   * @param   Element   generic DOM node with some text in some child node\n   * @param   Object    options  containing info about how to parse\n    *\n    *            .callback   Function  the callback to invoke per each found emoji.\n    *            .base       string    the base url, by default twemoji.base\n    *            .ext        string    the image extension, by default twemoji.ext\n    *            .size       string    the assets size, by default twemoji.size\n    *\n   * @return  Element same generic node with emoji in place, if any.\n   */\n  function parseNode(node, options) {\n    var\n      allText = grabAllTextNodes(node, []),\n      length = allText.length,\n      attrib,\n      attrname,\n      modified,\n      fragment,\n      subnode,\n      text,\n      match,\n      i,\n      index,\n      img,\n      rawText,\n      iconId,\n      src;\n    while (length--) {\n      modified = false;\n      fragment = document.createDocumentFragment();\n      subnode = allText[length];\n      text = subnode.nodeValue;\n      i = 0;\n      while ((match = re.exec(text))) {\n        index = match.index;\n        if (index !== i) {\n          fragment.appendChild(\n            createText(text.slice(i, index))\n          );\n        }\n        rawText = match[0];\n        iconId = grabTheRightIcon(rawText);\n        i = index + rawText.length;\n        src = options.callback(iconId, options);\n        if (src) {\n          img = new Image();\n          img.onerror = options.onerror;\n          img.setAttribute('draggable', 'false');\n          attrib = options.attributes(rawText, iconId);\n          for (attrname in attrib) {\n            if (\n              attrib.hasOwnProperty(attrname) &&\n              // don't allow any handlers to be set + don't allow overrides\n              attrname.indexOf('on') !== 0 &&\n              !img.hasAttribute(attrname)\n            ) {\n              img.setAttribute(attrname, attrib[attrname]);\n            }\n          }\n          img.className = options.className;\n          img.alt = rawText;\n          img.src = src;\n          modified = true;\n          fragment.appendChild(img);\n        }\n        if (!img) fragment.appendChild(createText(rawText));\n        img = null;\n      }\n      // is there actually anything to replace in here ?\n      if (modified) {\n        // any text left to be added ?\n        if (i < text.length) {\n          fragment.appendChild(\n            createText(text.slice(i))\n          );\n        }\n        // replace the text node only, leave intact\n        // anything else surrounding such text\n        subnode.parentNode.replaceChild(fragment, subnode);\n      }\n    }\n    return node;\n  }\n\n  /**\n   * String/HTML version of the same logic / parser:\n   *  emojify a generic text placing images tags instead of surrogates pair.\n   * @param   string    generic string with possibly some emoji in it\n   * @param   Object    options  containing info about how to parse\n   *\n   *            .callback   Function  the callback to invoke per each found emoji.\n   *            .base       string    the base url, by default twemoji.base\n   *            .ext        string    the image extension, by default twemoji.ext\n   *            .size       string    the assets size, by default twemoji.size\n   *\n   * @return  the string with <img tags> replacing all found and parsed emoji\n   */\n  function parseString(str, options) {\n    return replace(str, function (rawText) {\n      var\n        ret = rawText,\n        iconId = grabTheRightIcon(rawText),\n        src = options.callback(iconId, options),\n        attrib,\n        attrname;\n      if (src) {\n        // recycle the match string replacing the emoji\n        // with its image counter part\n        ret = '<img '.concat(\n          'class=\"', options.className, '\" ',\n          'draggable=\"false\" ',\n          // needs to preserve user original intent\n          // when variants should be copied and pasted too\n          'alt=\"',\n          rawText,\n          '\"',\n          ' src=\"',\n          src,\n          '\"'\n        );\n        attrib = options.attributes(rawText, iconId);\n        for (attrname in attrib) {\n          if (\n            attrib.hasOwnProperty(attrname) &&\n            // don't allow any handlers to be set + don't allow overrides\n            attrname.indexOf('on') !== 0 &&\n            ret.indexOf(' ' + attrname + '=') === -1\n          ) {\n            ret = ret.concat(' ', attrname, '=\"', escapeHTML(attrib[attrname]), '\"');\n          }\n        }\n        ret = ret.concat('>');\n      }\n      return ret;\n    });\n  }\n\n  /**\n   * Function used to actually replace HTML special chars\n   * @param   string  HTML special char\n   * @return  string  encoded HTML special char\n   */\n  function replacer(m) {\n    return escaper[m];\n  }\n\n  /**\n   * Default options.attribute callback\n   * @return  null\n   */\n  function returnNull() {\n    return null;\n  }\n\n  /**\n   * Given a generic value, creates its squared counterpart if it's a number.\n   *  As example, number 36 will return '36x36'.\n   * @param   any     a generic value.\n   * @return  any     a string representing asset size, i.e. \"36x36\"\n   *                  only in case the value was a number.\n   *                  Returns initial value otherwise.\n   */\n  function toSizeSquaredAsset(value) {\n    return typeof value === 'number' ?\n      value + 'x' + value :\n      value;\n  }\n\n\n  /////////////////////////\n  //  exported functions //\n  //     declaration     //\n  /////////////////////////\n\n  function fromCodePoint(codepoint) {\n    var code = typeof codepoint === 'string' ?\n          parseInt(codepoint, 16) : codepoint;\n    if (code < 0x10000) {\n      return fromCharCode(code);\n    }\n    code -= 0x10000;\n    return fromCharCode(\n      0xD800 + (code >> 10),\n      0xDC00 + (code & 0x3FF)\n    );\n  }\n\n  function parse(what, how) {\n    if (!how || typeof how === 'function') {\n      how = {callback: how};\n    }\n    // if first argument is string, inject html <img> tags\n    // otherwise use the DOM tree and parse text nodes only\n    return (typeof what === 'string' ? parseString : parseNode)(what, {\n      callback:   how.callback || defaultImageSrcGenerator,\n      attributes: typeof how.attributes === 'function' ? how.attributes : returnNull,\n      base:       typeof how.base === 'string' ? how.base : twemoji.base,\n      ext:        how.ext || twemoji.ext,\n      size:       how.folder || toSizeSquaredAsset(how.size || twemoji.size),\n      className:  how.className || twemoji.className,\n      onerror:    how.onerror || twemoji.onerror\n    });\n  }\n\n  function replace(text, callback) {\n    return String(text).replace(re, callback);\n  }\n\n  function test(text) {\n    // IE6 needs a reset before too\n    re.lastIndex = 0;\n    var result = re.test(text);\n    re.lastIndex = 0;\n    return result;\n  }\n\n  function toCodePoint(unicodeSurrogates, sep) {\n    var\n      r = [],\n      c = 0,\n      p = 0,\n      i = 0;\n    while (i < unicodeSurrogates.length) {\n      c = unicodeSurrogates.charCodeAt(i++);\n      if (p) {\n        r.push((0x10000 + ((p - 0xD800) << 10) + (c - 0xDC00)).toString(16));\n        p = 0;\n      } else if (0xD800 <= c && c <= 0xDBFF) {\n        p = c;\n      } else {\n        r.push(c.toString(16));\n      }\n    }\n    return r.join(sep || '-');\n  }\n\n}());\nif (!location.protocol) {\n  twemoji.base = twemoji.base.replace(/^http:/, \"\");\n}\nmodule.exports = twemoji;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/twemoji/2/twemoji.npm.js\n// module id = 1\n// module chunks = 0"],"sourceRoot":""}